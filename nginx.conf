events {
    worker_connections 1024;
}

http {
    server_tokens off;

    upstream minio_s3 {
        least_conn;
        server minio:9000;
    }

    upstream minio_console {
        least_conn;
        server minio:9001;
    }

    # Define allowed origins for CORS and WebSocket protection
    map $http_origin $cors_origin {
        default "";
        "https://${MINIO_SERVER_NAME}" "$http_origin";
    }

    # Session protection variables
    map $http_x_forwarded_proto $session_secure_flag {
        default off;
        "https" on;
    }

    # Custom session management headers
    proxy_cookie_path / "/; HttpOnly; Secure; SameSite=Lax";

    # Strong SSL/TLS configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # Rate limiting to prevent brute force attacks
    limit_req_zone $binary_remote_addr zone=minio_limit:10m rate=10r/s;

    # HTTP to HTTPS redirection
    server {
        listen 80;
        listen [::]:80;
        server_name ${MINIO_SERVER_NAME};
        return 301 https://$host$request_uri;
    }

    # Main HTTPS server configuration
    server {
        listen 443 ssl http2;
        server_name ${MINIO_SERVER_NAME};

        # SSL Certificate configuration
        ssl_certificate /etc/nginx/certs/interats-file.pea.co.th.crt;
        ssl_certificate_key /etc/nginx/certs/interats-file.pea.co.th.key;

        # Security headers to prevent various attacks
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'";

        # Remove unnecessary headers
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;

        # Large file upload support
        client_max_body_size 1024M;
        client_body_buffer_size 16k;

        # Prevent HTTP Method Override and limit allowed methods
        if ($request_method !~ ^(GET|POST|HEAD|OPTIONS)$) {
            return 405;
        }

        # Main S3 endpoint
        location / {
            # Apply rate limiting
            limit_req zone=minio_limit burst=20 nodelay;

            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Strict origin checking for CORS
            if ($http_origin !~ ^https://${MINIO_SERVER_NAME}$) {
                add_header 'Access-Control-Allow-Origin' '';
                return 403;
            }

            # CORS preflight handling
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '$cors_origin';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            proxy_connect_timeout 300;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            chunked_transfer_encoding off;
            proxy_pass http://minio_s3;
        }

        # Enhanced login endpoint protection
        location /minio/ui/api/v1/login {
            # Additional security headers
            add_header Set-Cookie "SessionProtection=$request_id; Path=/; HttpOnly; Secure; SameSite=Lax" always;
            
            # Clear any existing potentially compromised session cookies
            add_header Set-Cookie "OldSession=; Expires=Thu, 01 Jan 1970 00:00:00 GMT; Path=/;" always;

            # Proxy to MinIO with enhanced header management
            proxy_pass http://minio_console;
            proxy_set_header X-Session-Protection $request_id;
            
            # Additional protection headers
            proxy_set_header X-Forwarded-Secure $session_secure_flag;
        }

        # MinIO Console endpoint with enhanced security
        location /minio/ui/ {
            # Session token rotation headers
            proxy_set_header X-Session-Rotation "rotate";

            # Apply rate limiting
            limit_req zone=minio_limit burst=20 nodelay;

            # Rewrite rule to strip /minio/ui/ prefix
            rewrite ^/minio/ui/(.*) /$1 break;

            # Strict headers for WebSocket security
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-NginX-Proxy true;

            # WebSocket hijacking prevention
            proxy_set_header Origin "";

            # WebSocket support with security
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Strict WebSocket origin checking
            if ($http_upgrade != "websocket") {
                return 403;
            }

            chunked_transfer_encoding off;

            # Proxy to MinIO console
            proxy_pass http://minio_console;
        }

        # Deny access to sensitive paths
        location ~ ^/(\.git|admin|config|backup) {
            deny all;
            return 403;
        }
    }

    # Global cookie and session protection
    map $http_cookie $session_protection {
        default "";
        "~*SessionProtection" "protected";
    }

    # Session validation block
    server {
        # Additional location to validate and enhance session security
        location /session-validate {
            # Implement session validation logic
            if ($session_protection != "protected") {
                return 403;
            }
            
            # Optional: additional session validation proxy
            proxy_pass http://minio_console/session-validate;
        }
    }

}